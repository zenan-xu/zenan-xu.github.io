"use strict";(self.webpackChunkzenan_website=self.webpackChunkzenan_website||[]).push([[475],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const l={id:"java",sidebar_label:"Java",sidebar_position:2},r="Java",o={unversionedId:"java",id:"java",title:"Java",description:"Javadoc",source:"@site/notes/2_java.md",sourceDirName:".",slug:"/java",permalink:"/docs/java",draft:!1,editUrl:"https://github.com/zenan-xu/zenan-xu.github.io/tree/main/notes/2_java.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"java",sidebar_label:"Java",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"My Notes",permalink:"/docs/intro"},next:{title:"Spring / Spring-Boot",permalink:"/docs/spring-boot"}},s={},c=[{value:"Javadoc",id:"javadoc",level:2},{value:"Reference a method",id:"reference-a-method",level:3},{value:"Get size/length",id:"get-sizelength",level:3},{value:"Collections / Map",id:"collections--map",level:2},{value:"ArrayList vs LinkedList",id:"arraylist-vs-linkedlist",level:3},{value:"<code>String.format</code> with same value multiple times",id:"stringformat-with-same-value-multiple-times",level:3},{value:"Move one element to first place in a map",id:"move-one-element-to-first-place-in-a-map",level:3},{value:"Date handling",id:"date-handling",level:2},{value:"Transform a time in string without time zone info to epoch",id:"transform-a-time-in-string-without-time-zone-info-to-epoch",level:3},{value:"Calculate difference between 2 instants",id:"calculate-difference-between-2-instants",level:3},{value:"Test util",id:"test-util",level:2},{value:"Test private method",id:"test-private-method",level:3},{value:"Dynamically get/set field",id:"dynamically-getset-field",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"java"},"Java"),(0,i.kt)("h2",{id:"javadoc"},"Javadoc"),(0,i.kt)("h3",{id:"reference-a-method"},"Reference a method"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javadoc"},"{@link Class#method()}\n")),(0,i.kt)("p",null,"If you get ",(0,i.kt)("inlineCode",{parentName:"p"},"Symbol ... is inaccessible from here")," in Intellij, check ",(0,i.kt)("a",{parentName:"p",href:"https://zenan-xu.github.io/docs/intellij#settings"},"intellij note")),(0,i.kt)("h3",{id:"get-sizelength"},"Get size/length"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"String : length()"),(0,i.kt)("li",{parentName:"ul"},"Collections : size()"),(0,i.kt)("li",{parentName:"ul"},"Map : size()"),(0,i.kt)("li",{parentName:"ul"},"Array : length")),(0,i.kt)("h2",{id:"collections--map"},"Collections / Map"),(0,i.kt)("h3",{id:"arraylist-vs-linkedlist"},"ArrayList vs LinkedList"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Internal Implementation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ArrayList internally uses a dynamic array to store its elements."),(0,i.kt)("li",{parentName:"ul"},"LinkedList uses Doubly Linked List to store its elements."))),(0,i.kt)("li",{parentName:"ol"},"Manipulation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ArrayList is slow as array manipulation is slower."),(0,i.kt)("li",{parentName:"ul"},"LinkedList is faster being node based as not much bit shifting required."))),(0,i.kt)("li",{parentName:"ol"},"Implementation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ArrayList implements only List. "),(0,i.kt)("li",{parentName:"ul"},"LinkedList implements List as well as Queue. It can acts as a queue as well."))),(0,i.kt)("li",{parentName:"ol"},"Access",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ArrayList is faster in storing and accessing data."),(0,i.kt)("li",{parentName:"ul"},"LinkedList is faster in manipulation of data.")))),(0,i.kt)("h3",{id:"stringformat-with-same-value-multiple-times"},(0,i.kt)("inlineCode",{parentName:"h3"},"String.format")," with same value multiple times"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'String s = "%s %1$s %1$s".\nString.format(s, "hello");\n')),(0,i.kt)("h3",{id:"move-one-element-to-first-place-in-a-map"},"Move one element to first place in a map"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Map<String, String> copy = new LinkedHashMap<>(origin);\norigin.keySet().retainAll(Collections.singleton(value));\norigin.putAll(copy);\n")),(0,i.kt)("h2",{id:"date-handling"},"Date handling"),(0,i.kt)("h3",{id:"transform-a-time-in-string-without-time-zone-info-to-epoch"},"Transform a time in string without time zone info to epoch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'String aDate = "2024-04-30 15:00:00";\nLocalDateTime.parse(aDate, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")).atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n')),(0,i.kt)("p",null,"LocalDateTime does not contain zone info, so it fits to parse this date in string. And then transform to ",(0,i.kt)("inlineCode",{parentName:"p"},"Instant")," with a zone."),(0,i.kt)("h3",{id:"calculate-difference-between-2-instants"},"Calculate difference between 2 instants"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ChronoUnit.MINUTES.between(Instant.ofEpochMilli(123L), Instant.ofEpochMilli(Instant.now().toEpochMilli()));\n")),(0,i.kt)("h2",{id:"test-util"},"Test util"),(0,i.kt)("h3",{id:"test-private-method"},"Test private method"),(0,i.kt)("p",null,"Ex : ",(0,i.kt)("inlineCode",{parentName:"p"},'Object returnValue = executeMethod(getMethod("methodName", RequestParam.class), testClass, requestParam)')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private static Object executeMethod(Method method, Object obj, Object... params) throws InvocationTargetException, IllegalAccessException {\n    method.setAccessible(true);\n    return method.invoke(obj, params)\n}\n\nprivate static Method getMethod(String methodName, Class<?>... clazz) throws NoSuchMethodException {\n   return TestClass.class.getDeclaredMethod(methodName, clazz);\n}\n")),(0,i.kt)("h3",{id:"dynamically-getset-field"},"Dynamically get/set field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@SneakyThrows\npublic static <T> T get(String fieldName, Object instance, Class<?> instanceClass) {\n   return (T) instanceClass.getDeclaredField(fieldName).get(instance);\n}\n\n@SneakyThrows\npublic static <T> void set(String fieldName, Object instance, T value) {\n   Field field = instance.getClass().getDeclaredField(fieldName);\n   field.setAccessible(true);\n   field.set(instance, value);\n}\n")))}m.isMDXComponent=!0}}]);